{"version":3,"file":"menu_navigation.min.js","sources":["../src/menu_navigation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Keyboard initialization for a given html node.\n *\n * @module     core/keyboard_navigation\n * @copyright  2021 Moodle\n * @author     Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {space, enter, arrowRight, arrowLeft, arrowDown, arrowUp, home, end} from 'core/key_codes';\n\nconst SELECTORS = {\n    'menuitem': '[role=\"menuitem\"]',\n    'menu': '[role=\"menu\"]'\n};\n\nlet openDropdownNode = null;\n\n/**\n * Small helper function to check if a given node is null or not.\n *\n * @param {HTMLElement|null} item The node that we want to compare.\n * @param {HTMLElement} fallback Either the first node or final node that can be focused on.\n * @return {HTMLElement}\n */\nconst clickErrorHandler = (item, fallback) => {\n    if (item !== null) {\n        return item;\n    } else {\n        return fallback;\n    }\n};\n\n/**\n * Control classes etc of the selected dropdown item and its' parent <a>\n *\n * @param {HTMLElement} src The node within the dropdown the user selected.\n */\nconst menuItemHelper = src => {\n    let parent;\n\n    // Handling for dropdown escapes.\n    // A bulk of the handling is already done by aria.js just add polish.\n    if (src.classList.contains('dropdown-item')) {\n        parent = src.closest('.dropdown-menu');\n        parent.previousElementSibling.classList.add('active');\n    } else {\n        parent = src.parentElement.parentElement.querySelector('.dropdown-menu');\n    }\n    // Remove active class from any other dropdown elements.\n    Array.prototype.forEach.call(parent.children, node => {\n        const menuItem = node.querySelector(SELECTORS.menuitem);\n        if (menuItem !== null) {\n            menuItem.classList.remove('active');\n            menuItem.setAttribute('aria-current', 'false');\n        }\n        node.setAttribute('aria-current', 'false');\n    });\n    src.setAttribute('aria-current', 'true');\n};\n\n/**\n * Defined keyboard event handling so we can remove listeners on nodes on resize etc.\n *\n * @param {event} e The triggering element and key presses etc.\n */\nconst keyboardListenerEvents = e => {\n    const src = e.srcElement;\n    const firstNode = e.currentTarget.firstElementChild;\n    const lastNode = findUsableLastNode(e.currentTarget);\n\n    // Handling for dropdown escapes.\n    // A bulk of the handling is already done by aria.js just add polish.\n    if (src.classList.contains('dropdown-item')) {\n        if (e.keyCode === arrowRight ||\n            e.keyCode === arrowLeft) {\n            e.preventDefault();\n            if (openDropdownNode !== null) {\n                openDropdownNode.parentElement.click();\n            }\n        }\n        if (e.keyCode === space ||\n            e.keyCode === enter) {\n            e.preventDefault();\n\n            menuItemHelper(src);\n\n            if (!src.parentElement.classList.contains('dropdown')) {\n                src.click();\n            }\n        }\n    } else {\n        if (e.keyCode === arrowRight) {\n            e.preventDefault();\n            setFocusNext(src, firstNode);\n        }\n        if (e.keyCode === arrowLeft) {\n            e.preventDefault();\n            setFocusPrev(src, lastNode);\n        }\n        // Let aria.js handle the dropdowns.\n        if (e.keyCode === arrowUp ||\n            e.keyCode === arrowDown) {\n            openDropdownNode = src;\n            e.preventDefault();\n        }\n        if (e.keyCode === home) {\n            e.preventDefault();\n            src.setAttribute('aria-current', 'false');\n            setFocusHomeEnd(firstNode);\n        }\n        if (e.keyCode === end) {\n            e.preventDefault();\n            src.currentNode.setAttribute('aria-current', 'false');\n            setFocusHomeEnd(lastNode);\n        }\n        if (e.keyCode === space ||\n            e.keyCode === enter) {\n            e.preventDefault();\n            // Aria.js handles dropdowns etc.\n            if (!src.parentElement.classList.contains('dropdown')) {\n                src.click();\n            }\n        }\n    }\n};\n\n/**\n * Defined click event handling so we can remove listeners on nodes on resize etc.\n *\n * @param {event} e The triggering element and key presses etc.\n */\nconst clickListenerEvents = e => {\n    const src = e.srcElement;\n    menuItemHelper(src);\n};\n\n/**\n * The initial entry point that a given module can pass a HTMLElement.\n *\n * @param {HTMLElement} elementRoot The menu to add handlers upon.\n */\nexport default elementRoot => {\n    // Remove any and all instances of old listeners on the passed element.\n    elementRoot.removeEventListener('keydown', keyboardListenerEvents);\n    elementRoot.removeEventListener('click', clickListenerEvents);\n    // (Re)apply our event listeners to the passed element.\n    elementRoot.addEventListener('keydown', keyboardListenerEvents);\n    elementRoot.addEventListener('click', clickListenerEvents);\n};\n\n/**\n * Handle the focusing to the next element in the dropdown.\n *\n * @param {HTMLElement|null} currentNode The node that we want to take action on.\n * @param {HTMLElement} firstNode The backup node to focus as a last resort.\n */\nconst setFocusNext = (currentNode, firstNode) => {\n    const nextListItem = currentNode.parentElement.nextElementSibling;\n    const nodeToSelect = clickErrorHandler(nextListItem, firstNode);\n    const menuItem = nodeToSelect.querySelector(SELECTORS.menuitem);\n    currentNode.setAttribute('aria-current', 'false');\n    menuItem.setAttribute('aria-current', 'true');\n    menuItem.focus();\n};\n\n/**\n * Handle the focusing to the previous element in the dropdown.\n *\n * @param {HTMLElement|null} currentNode The node that we want to take action on.\n * @param {HTMLElement} lastNode The backup node to focus as a last resort.\n */\nconst setFocusPrev = (currentNode, lastNode) => {\n    const nextListItem = currentNode.parentElement.previousElementSibling;\n    const nodeToSelect = clickErrorHandler(nextListItem, lastNode);\n    const menuItem = nodeToSelect.querySelector(SELECTORS.menuitem);\n    currentNode.setAttribute('aria-current', 'false');\n    menuItem.setAttribute('aria-current', 'true');\n    menuItem.focus();\n};\n\n/**\n * Focus on either the start or end of a nav list.\n *\n * @param {HTMLElement} node The element to focus on.\n */\nconst setFocusHomeEnd = node => {\n    node.querySelector(SELECTORS.menuitem).focus();\n    node.querySelector(SELECTORS.menuitem).setAttribute('aria-current', 'true');\n};\n\n/**\n * We need to look within the menu to find a last node we can add focus to.\n *\n * @param {HTMLElement} elementRoot Menu to find a final child node within.\n * @return {HTMLElement}\n */\nconst findUsableLastNode = elementRoot => {\n    const lastNode = elementRoot.lastElementChild;\n\n    // An example is the more menu existing but hidden on the page for the time being.\n    if (!lastNode.classList.contains('d-none')) {\n        return elementRoot.lastElementChild;\n    } else {\n        // Cast the HTMLCollection & reverse it.\n        const extractedNodes = Array.prototype.map.call(elementRoot.children, node => {\n            return node;\n        }).reverse();\n\n        // Get rid of any nodes we can not set focus on.\n        const nodesToUse = extractedNodes.filter((node => {\n            if (!node.classList.contains('d-none')) {\n                return node;\n            }\n        }));\n\n        // If we find no elements we can set focus on, fall back to the absolute first element.\n        if (nodesToUse.length !== 0) {\n            return nodesToUse[0];\n        } else {\n            return elementRoot.firstElementChild;\n        }\n    }\n};\n"],"names":["SELECTORS","openDropdownNode","clickErrorHandler","item","fallback","menuItemHelper","src","parent","classList","contains","closest","previousElementSibling","add","parentElement","querySelector","Array","prototype","forEach","call","children","node","menuItem","remove","setAttribute","keyboardListenerEvents","e","srcElement","firstNode","currentTarget","firstElementChild","lastNode","findUsableLastNode","keyCode","arrowRight","arrowLeft","preventDefault","click","space","enter","setFocusNext","setFocusPrev","arrowUp","arrowDown","home","setFocusHomeEnd","end","currentNode","clickListenerEvents","elementRoot","removeEventListener","addEventListener","nextListItem","nextElementSibling","focus","lastElementChild","nodesToUse","map","reverse","filter","length"],"mappings":";;;;;;;;;IA0BMA,mBACU,oBAIZC,iBAAmB,KASjBC,kBAAoB,SAACC,KAAMC,iBAChB,OAATD,KACOA,KAEAC,UASTC,eAAiB,SAAAC,SACfC,OAIAD,IAAIE,UAAUC,SAAS,kBACvBF,OAASD,IAAII,QAAQ,mBACdC,uBAAuBH,UAAUI,IAAI,UAE5CL,OAASD,IAAIO,cAAcA,cAAcC,cAAc,kBAG3DC,MAAMC,UAAUC,QAAQC,KAAKX,OAAOY,UAAU,SAAAC,UACpCC,SAAWD,KAAKN,cAAcd,oBACnB,OAAbqB,WACAA,SAASb,UAAUc,OAAO,UAC1BD,SAASE,aAAa,eAAgB,UAE1CH,KAAKG,aAAa,eAAgB,YAEtCjB,IAAIiB,aAAa,eAAgB,SAQ/BC,uBAAyB,SAAAC,OACrBnB,IAAMmB,EAAEC,WACRC,UAAYF,EAAEG,cAAcC,kBAC5BC,SAAWC,mBAAmBN,EAAEG,eAIlCtB,IAAIE,UAAUC,SAAS,kBACnBgB,EAAEO,UAAYC,uBACdR,EAAEO,UAAYE,uBACdT,EAAEU,iBACuB,OAArBlC,kBACAA,iBAAiBY,cAAcuB,SAGnCX,EAAEO,UAAYK,kBACdZ,EAAEO,UAAYM,mBACdb,EAAEU,iBAEF9B,eAAeC,KAEVA,IAAIO,cAAcL,UAAUC,SAAS,aACtCH,IAAI8B,WAIRX,EAAEO,UAAYC,wBACdR,EAAEU,iBACFI,aAAajC,IAAKqB,YAElBF,EAAEO,UAAYE,uBACdT,EAAEU,iBACFK,aAAalC,IAAKwB,WAGlBL,EAAEO,UAAYS,oBACdhB,EAAEO,UAAYU,uBACdzC,iBAAmBK,IACnBmB,EAAEU,kBAEFV,EAAEO,UAAYW,kBACdlB,EAAEU,iBACF7B,IAAIiB,aAAa,eAAgB,SACjCqB,gBAAgBjB,YAEhBF,EAAEO,UAAYa,iBACdpB,EAAEU,iBACF7B,IAAIwC,YAAYvB,aAAa,eAAgB,SAC7CqB,gBAAgBd,WAEhBL,EAAEO,UAAYK,kBACdZ,EAAEO,UAAYM,mBACdb,EAAEU,iBAEG7B,IAAIO,cAAcL,UAAUC,SAAS,aACtCH,IAAI8B,WAWdW,oBAAsB,SAAAtB,OAClBnB,IAAMmB,EAAEC,WACdrB,eAAeC,uBAQJ,SAAA0C,aAEXA,YAAYC,oBAAoB,UAAWzB,wBAC3CwB,YAAYC,oBAAoB,QAASF,qBAEzCC,YAAYE,iBAAiB,UAAW1B,wBACxCwB,YAAYE,iBAAiB,QAASH,0BASpCR,aAAe,SAACO,YAAanB,eACzBwB,aAAeL,YAAYjC,cAAcuC,mBAEzC/B,SADenB,kBAAkBiD,aAAcxB,WACvBb,cAAcd,oBAC5C8C,YAAYvB,aAAa,eAAgB,SACzCF,SAASE,aAAa,eAAgB,QACtCF,SAASgC,SASPb,aAAe,SAACM,YAAahB,cACzBqB,aAAeL,YAAYjC,cAAcF,uBAEzCU,SADenB,kBAAkBiD,aAAcrB,UACvBhB,cAAcd,oBAC5C8C,YAAYvB,aAAa,eAAgB,SACzCF,SAASE,aAAa,eAAgB,QACtCF,SAASgC,SAQPT,gBAAkB,SAAAxB,MACpBA,KAAKN,cAAcd,oBAAoBqD,QACvCjC,KAAKN,cAAcd,oBAAoBuB,aAAa,eAAgB,SASlEQ,mBAAqB,SAAAiB,gBACNA,YAAYM,iBAGf9C,UAAUC,SAAS,UAE1B,KAOG8C,WALiBxC,MAAMC,UAAUwC,IAAItC,KAAK8B,YAAY7B,UAAU,SAAAC,aAC3DA,QACRqC,UAG+BC,QAAQ,SAAAtC,UACjCA,KAAKZ,UAAUC,SAAS,iBAClBW,eAKW,IAAtBmC,WAAWI,OACJJ,WAAW,GAEXP,YAAYnB,yBAlBhBmB,YAAYM"}