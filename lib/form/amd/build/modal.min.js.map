{"version":3,"sources":["../src/modal.js"],"names":["ModalForm","config","modal","modalConfig","removeOnClose","type","ModalFactory","types","SAVE_CANCEL","args","init","M","util","js_pending","key","component","then","create","formString","Object","keys","map","k","encodeURIComponent","join","setBody","getBody","setLarge","getRoot","on","ModalEvents","hidden","resetDirtyFormState","notifyFormSubmitAjax","destroy","returnFocus","focus","getModal","addClass","noSubmitButtonPressed","bind","submitFormAjax","saveButtonText","setSaveButtonText","saveButtonClasses","setSaveButtonClasses","registerCloseOnOther","onInit","show","js_complete","fail","Notification","exception","save","submitForm","callback","formDataString","params","formdata","form","formClass","Ajax","call","methodname","response","html","Fragment","processCollectedJavascript","javascript","Y","use","core_formchangechecker","reset_form_dirty_state","skipValidation","Promise","resolve","Event","find","e","preventDefault","target","currentTarget","formData","serialize","getAttribute","invalid","length","first","getFooter","attr","removeAttr","validateElements","disableButtons","submitted","promise","enableButtons","onValidationError","data","JSON","parse","hide","onSubmitSuccess","onSubmitError","submit","value","button","Error","removeClass"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Display a form in a modal dialogue\n *\n * @module     core_form/modal\n * @package    core_form\n * @copyright  2018 Mitxel Moriana <mitxel@tresipunt.>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport Y from 'core/yui';\nimport Event from 'core/event';\nimport {get_strings as getStrings} from 'core/str';\nimport Fragment from 'core/fragment';\n\nexport default class ModalForm {\n    /**\n     * Constructor\n     *\n     * Shows the required form inside a modal dialogue\n     *\n     * @param {Object} config Parameters for the list. See defaultParameters above for examples.\n     * @property {String} config.formClass PHP class name that handles the form (should extend \\core_form\\modal )\n     * @property {Object} config.modalConfig modal config - title, type, etc. By default type is set\n     *              to ModalFactory.types.SAVE_CANCEL and removeOnClose is true\n     * @property {Object} config.args Arguments for the initial form rendering\n     * @property {String} config.saveButtonText the text to display on the Modal \"Save\" button (optional)\n     * @property {String} config.saveButtonClasses additional CSS classes for the Modal \"Save\" button\n     * @property {HTMLElement} config.returnFocus element to return focus to after the dialogue is closed\n     */\n    constructor(config) {\n        this.modal = null;\n        this.config = config;\n        this.config.modalConfig = {removeOnClose: true, type: ModalFactory.types.SAVE_CANCEL,\n            ...(this.config.modalConfig || {})};\n        this.config.args = this.config.args || {};\n        this.init();\n    }\n\n    /**\n     * Initialise the class.\n     *\n     * @private\n     */\n    init() {\n        var requiredStrings = [\n            {key: 'collapseall', component: 'moodle'},\n            {key: 'expandall', component: 'moodle'}\n        ];\n\n        // Ensure strings required for shortforms are always available.\n        M.util.js_pending('core_form_modal_form_init');\n        getStrings(requiredStrings)\n            .then(() => ModalFactory.create(this.config.modalConfig))\n            .then((modal) => {\n                // Keep a reference to the modal.\n                this.modal = modal;\n\n                // We need to make sure that the modal already exists when we render the form. Some form elements\n                // such as date_selector inspect the existing elements on the page to find the highest z-index.\n                const formString = Object.keys(this.config.args)\n                    .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(this.config.args[k]))\n                    .join('&');\n                this.modal.setBody(this.getBody(formString));\n\n                // Forms are big, we want a big modal.\n                this.modal.setLarge();\n\n                // After successfull submit, when we press \"Cancel\" or close the dialogue by clicking on X in the top right corner.\n                this.modal.getRoot().on(ModalEvents.hidden, () => {\n                    // Reset form-change-checker.\n                    this.resetDirtyFormState();\n                    // Notify listeners that the form is about to be submitted (this will reset atto autosave).\n                    this.notifyFormSubmitAjax(true)\n                        .then(() => {\n                            this.modal.destroy();\n                            // Focus on the element that actually launched the modal.\n                            if (this.config.returnFocus) {\n                                this.config.returnFocus.focus();\n                            }\n                            return null;\n                        });\n                });\n\n                // Add the class to the modal dialogue.\n                this.modal.getModal().addClass('tool-wp-modal-form-dialogue');\n\n                // We catch the press on submit buttons in the forms.\n                this.modal.getRoot().on('click', 'form input[type=submit][data-no-submit]',\n                    this.noSubmitButtonPressed.bind(this));\n\n                // We catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                // Change the text for the save button.\n                if (typeof this.config.saveButtonText !== 'undefined' &&\n                    typeof this.modal.setSaveButtonText !== 'undefined') {\n                    this.modal.setSaveButtonText(this.config.saveButtonText);\n                }\n                // Set classes for the save button.\n                if (typeof this.config.saveButtonClasses !== 'undefined') {\n                    this.setSaveButtonClasses(this.config.saveButtonClasses);\n                }\n                // Register Other button callback when this type is used.\n                if (this.config.modalConfig.type === \"SAVE_CANCEL_OTHER\") {\n                    this.modal.registerCloseOnOther(this.registerCloseOnOther);\n                }\n                this.onInit();\n\n                this.modal.show();\n                M.util.js_complete('core_form_modal_form_init');\n                return this.modal;\n            })\n            .fail(Notification.exception);\n    }\n\n    /**\n     * On initialisation of a modal dialogue. Caller may override.\n     */\n    onInit() {\n        // We catch the modal save event, and use it to submit the form inside the modal.\n        // Triggering a form submission will give JS validation scripts a chance to check for errors.\n        this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n    }\n\n    /**\n     * Callback function for third button when type is SAVE_CANCEL_OTHER. Caller may override.\n     * @param {Function} callback\n     * @returns {Function} callback\n     */\n    registerCloseOnOther(callback) {\n        return callback;\n    }\n\n    /**\n     * Get form contents (to be used in ModalForm.setBody())\n     *\n     * @param {String} formDataString form data in format of a query string\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    getBody(formDataString) {\n        const params = {\n            formdata: formDataString,\n            form: this.config.formClass\n        };\n        M.util.js_pending('core_form_modal_form_body');\n        return Ajax.call([{\n            methodname: 'core_form_modal',\n            args: params\n        }])[0]\n            .then(response => {\n                M.util.js_complete('core_form_modal_form_body');\n                return [response.html, Fragment.processCollectedJavascript(response.javascript)];\n            });\n    }\n\n    /**\n     * On form submit. Caller may override\n     *\n     * @param {Object} response Response received from the form's \"process\" method\n     * @return {Object}\n     */\n    onSubmitSuccess(response) {\n        // By default this function does nothing. Return here is irrelevant, it is only present to make eslint happy.\n        return response;\n    }\n\n    /**\n     * On form validation error. Caller may override\n     *\n     * @return {mixed}\n     */\n    onValidationError() {\n        // By default this function does nothing. Return here is irrelevant, it is only present to make eslint happy.\n        return undefined;\n    }\n\n    /**\n     * On exception during form processing. Caller may override\n     *\n     * @param {Object} exception\n     */\n    onSubmitError(exception) {\n        Notification.exception(exception);\n    }\n\n    /**\n     * Reset \"dirty\" form state (warning if there are changes)\n     */\n    resetDirtyFormState() {\n        Y.use('moodle-core-formchangechecker', function() {\n            M.core_formchangechecker.reset_form_dirty_state();\n        });\n    }\n\n    /**\n     * Wrapper for Event.notifyFormSubmitAjax that waits for the module to load\n     *\n     * We often destroy the form right after calling this function and we need to make sure that it actually\n     * completes before it, or otherwise it will try to work with a form that does not exist.\n     *\n     * @param {Boolean} skipValidation\n     * @return {Promise}\n     */\n    notifyFormSubmitAjax(skipValidation = false) {\n        return new Promise(resolve => {\n            Y.use('event', 'moodle-core-event', 'moodle-core-formchangechecker', () => {\n                Event.notifyFormSubmitAjax(this.modal.getRoot().find('form')[0], skipValidation);\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Click on a \"submit\" button that is marked in the form as registerNoSubmitButton()\n     *\n     * @method submitButtonPressed\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    async noSubmitButtonPressed(e) {\n        e.preventDefault();\n        const target = e.currentTarget;\n\n        await this.notifyFormSubmitAjax(true);\n\n        // Add the button name to the form data and submit it.\n        let formData = this.modal.getRoot().find('form').serialize();\n        formData = formData + '&' + encodeURIComponent(target.getAttribute('name')) + '=' +\n            encodeURIComponent(target.getAttribute('value'));\n        this.modal.setBody(this.getBody(formData));\n    }\n\n    /**\n     * Validate form elements\n     * @return {boolean} true if client-side validation has passed, false if there are errors\n     */\n    async validateElements() {\n        await this.notifyFormSubmitAjax();\n\n        // Now the change events have run, see if there are any \"invalid\" form fields.\n        /** @var {jQuery} list of elements with errors */\n        const invalid = this.modal.getRoot().find('[aria-invalid=\"true\"], .error');\n\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (invalid.length) {\n            invalid.first().focus();\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Disable buttons during form submission\n     */\n    disableButtons() {\n        this.modal.getFooter().find('[data-action]').attr('disabled', true);\n    }\n\n    /**\n     * Enable buttons after form submission (on validation error)\n     */\n    enableButtons() {\n        this.modal.getFooter().find('[data-action]').removeAttr('disabled');\n    }\n\n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    async submitFormAjax(e) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (!await this.validateElements()) {\n            return;\n        }\n        this.disableButtons();\n\n        // Convert all the form elements values to a serialised string.\n        const formData = this.modal.getRoot().find('form').serialize();\n\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'core_form_modal',\n            args: {\n                formdata: formData,\n                form: this.config.formClass\n            }\n        }])[0]\n            .then((response) => {\n                if (!response.submitted) {\n                    // Form was not submitted, it could be either because validation failed or because no-submit button was pressed.\n                    const promise = new Promise(\n                        resolve => resolve([response.html, Fragment.processCollectedJavascript(response.javascript)]));\n                    this.modal.setBody(promise);\n                    this.enableButtons();\n                    this.onValidationError();\n                } else {\n                    // Form was submitted properly. Hide the modal and execute callback.\n                    var data = JSON.parse(response.data);\n                    this.modal.hide();\n                    this.onSubmitSuccess(data);\n                }\n                return null;\n            })\n            .fail(() => this.onSubmitError());\n    }\n\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks\n     * before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    submitForm(e) {\n        e.preventDefault();\n        this.modal.getRoot().find('form').submit();\n    }\n\n    /**\n     * Set the classes for the 'save' button.\n     *\n     * @method setSaveButtonClasses\n     * @param {(String)} value The 'save' button classes.\n     */\n    setSaveButtonClasses(value) {\n        const button = this.modal.getFooter().find(\"[data-action='save']\");\n        if (!button) {\n            throw new Error(\"Unable to find the 'save' button\");\n        }\n        button.removeClass().addClass(value);\n    }\n}\n"],"file":"modal.min.js"}