{"version":3,"sources":["../src/ajaxform.js"],"names":["AjaxForm","container","formClass","key","component","catch","Notification","exception","on","eventType","childSelector","eventHandler","addEventListener","eventOnElement","target","matches","cancelButtonPressed","bind","noSubmitButtonPressed","submitFormAjax","args","formData","Object","keys","map","k","encodeURIComponent","join","getBody","then","html","js","updateForm","formDataString","Promise","resolve","reject","Ajax","call","methodname","formdata","form","response","Fragment","processCollectedJavascript","javascript","ex","innerHTML","FormData","get","e","preventDefault","button","querySelector","notifyFormSubmitAjax","serializeForm","getAttribute","disableButtons","skipValidation","promise","Y","use","Event","M","core_formchangechecker","reset_form_dirty_state","onCancel","Templates","replaceNodeContents","invalid","querySelectorAll","length","focus","el","setAttribute","removeAttribute","validateElements","submitted","enableButtons","onValidationError","data","JSON","parse","onSubmitSuccess","fail","onSubmitError"],"mappings":"sPAwBA,OACA,OACA,OACA,OAEA,OACA,O,m/DAEqBA,CAAAA,C,YASjB,WAAYC,CAAZ,CAAuBC,CAAvB,CAAkC,sBAC9B,KAAKA,SAAL,CAAiBA,CAAjB,CACA,KAAKD,SAAL,CAAiBA,CAAjB,CAGA,kBAAW,CACP,CAACE,GAAG,CAAE,aAAN,CAAqBC,SAAS,CAAE,QAAhC,CADO,CAEP,CAACD,GAAG,CAAE,WAAN,CAAmBC,SAAS,CAAE,QAA9B,CAFO,CAAX,EAGGC,KAHH,CAGSC,UAAaC,SAHtB,EAMA,GAAMC,CAAAA,CAAE,CAAG,SAACC,CAAD,CAAYC,CAAZ,CAA2BC,CAA3B,CAA4C,CACnD,CAAI,CAACV,SAAL,CAAeW,gBAAf,CAAgCH,CAAhC,CAA2C,SAAAI,CAAc,CAAI,CACzD,GAAIA,CAAc,CAACC,MAAf,CAAsBC,OAAtB,CAA8BL,CAA9B,CAAJ,CAAkD,CAC9CC,CAAY,CAACE,CAAD,CACf,CACJ,CAJD,CAKH,CAND,CASAL,CAAE,CAAC,OAAD,CAAU,sCAAV,CAAkD,KAAKQ,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,CAAlD,CAAF,CAGAT,CAAE,CAAC,OAAD,CAAU,yCAAV,CAAqD,KAAKU,qBAAL,CAA2BD,IAA3B,CAAgC,IAAhC,CAArD,CAAF,CAGAT,CAAE,CAAC,QAAD,CAAW,MAAX,CAAmB,KAAKW,cAAL,CAAoBF,IAApB,CAAyB,IAAzB,CAAnB,CACL,C,qCASIG,C,CAAM,YACDC,CAAQ,CAAGC,MAAM,CAACC,IAAP,CAAYH,CAAI,EAAI,EAApB,EACZI,GADY,CACR,SAAAC,CAAC,QAAIC,CAAAA,kBAAkB,CAACD,CAAD,CAAlB,CAAwB,GAAxB,CAA8BC,kBAAkB,CAACN,CAAI,CAACK,CAAD,CAAL,CAApD,CADO,EAEZE,IAFY,CAEP,GAFO,CADV,CAIP,MAAO,MAAKC,OAAL,CAAaP,CAAb,EACFQ,IADE,CACG,yBAAEC,CAAF,MAAQC,CAAR,YAAgB,CAAA,CAAI,CAACC,UAAL,CAAgBF,CAAhB,CAAsBC,CAAtB,CAAhB,CADH,CAEV,C,wCAQOE,C,CAAgB,YACpB,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,CAAD,CAAUC,CAAV,CAAqB,CACpCC,UAAKC,IAAL,CAAU,CAAC,CACPC,UAAU,CAAE,iBADL,CAEPnB,IAAI,CAAE,CACFoB,QAAQ,CAAEP,CADR,CAEFQ,IAAI,CAAE,CAAI,CAACvC,SAFT,CAFC,CAAD,CAAV,EAMI,CANJ,EAOK2B,IAPL,CAOU,SAAAa,CAAQ,QAAIP,CAAAA,CAAO,CAAC,CAACO,CAAQ,CAACZ,IAAV,CAAgBa,UAASC,0BAAT,CAAoCF,CAAQ,CAACG,UAA7C,CAAhB,CAAD,CAAX,CAPlB,EAQKxC,KARL,CAQW,SAAAyC,CAAE,QAAIV,CAAAA,CAAM,CAACU,CAAD,CAAV,CARb,CASH,CAVM,CAWV,C,wDAQeJ,C,CAAU,CAGtB,KAAKzC,SAAL,CAAe8C,SAAf,CAA2B,EAA3B,CAGA,MAAOL,CAAAA,CACV,C,6DAOmB,CAGnB,C,2CAKU,CAEP,KAAKzC,SAAL,CAAe8C,SAAf,CAA2B,EAC9B,C,oDAOaxC,C,CAAW,CACrBD,UAAaC,SAAb,CAAuBA,CAAvB,CACH,C,oDAEakC,C,CAAM,CAChB,GAAIpB,CAAAA,CAAQ,CAAG,GAAI2B,CAAAA,QAAJ,CAAaP,CAAb,CAAf,CACA,MAAO,GAAIpB,CAAQ,CAACE,IAAT,EAAJ,EACFC,GADE,CACE,SAAArB,CAAG,QAAIuB,CAAAA,kBAAkB,CAACvB,CAAD,CAAlB,CAA0B,GAA1B,CAAgCuB,kBAAkB,CAACL,CAAQ,CAAC4B,GAAT,CAAa9C,CAAb,CAAD,CAAtD,CADL,EAEFwB,IAFE,CAEG,GAFH,CAGV,C,2FAS2BuB,C,oGACxBA,CAAC,CAACC,cAAF,GAEIC,C,CAASF,CAAC,CAACpC,M,CACX2B,C,CAAO,KAAKxC,SAAL,CAAeoD,aAAf,CAA6B,MAA7B,C,gBACL,MAAKC,oBAAL,CAA0Bb,CAA1B,I,QAGApB,C,CAAW,KAAKkC,aAAL,CAAmBd,CAAnB,EAA2B,GAA3B,CACbf,kBAAkB,CAAC0B,CAAM,CAACI,YAAP,CAAoB,MAApB,CAAD,CADL,CACqC,GADrC,CAEb9B,kBAAkB,CAAC0B,CAAM,CAACI,YAAP,CAAoB,OAApB,CAAD,C,CACtB,KAAKC,cAAL,GACA,KAAK7B,OAAL,CAAaP,CAAb,EACKQ,IADL,CACU,yBAAEC,CAAF,MAAQC,CAAR,YAAgB,CAAA,CAAI,CAACC,UAAL,CAAgBF,CAAhB,CAAsBC,CAAtB,CAAhB,CADV,EAEK1B,KAFL,CAEWC,UAAaC,SAFxB,E,oNAcuBkC,C,uGAAMiB,C,mCACzBC,C,CAAU,GAAIzB,CAAAA,OAAJ,CAAY,SAAAC,CAAO,CAAI,CACjCyB,UAAEC,GAAF,CAAM,OAAN,CAAe,mBAAf,CAAoC,+BAApC,CAAqE,UAAW,CAC5EC,UAAMR,oBAAN,CAA2Bb,CAA3B,CAAiCiB,CAAjC,EACAvB,CAAO,EACV,CAHD,CAIH,CALa,C,gBAMRwB,CAAAA,C,8MAUgBT,C,yFACtBA,CAAC,CAACC,cAAF,GAEMV,C,CAAO,KAAKxC,SAAL,CAAeoD,aAAf,CAA6B,MAA7B,C,gBAEP,MAAKC,oBAAL,CAA0Bb,CAA1B,I,QAENsB,CAAC,CAACC,sBAAF,CAAyBC,sBAAzB,GAEA,KAAKC,QAAL,G,sKASOpC,C,CAAMC,C,CAAI,CACjBoC,UAAUC,mBAAV,CAA8B,KAAKnE,SAAnC,CAA8C6B,CAA9C,CAAoDC,CAApD,CACH,C,8LASS,MAAKuB,oBAAL,CAA0B,KAAKrD,SAAL,CAAeoD,aAAf,CAA6B,MAA7B,CAA1B,C,QAGAgB,C,GAAc,KAAKpE,SAAL,CAAeqE,gBAAf,CAAgC,iCAAhC,C,MAGhBD,CAAO,CAACE,M,iBACRF,CAAO,CAAC,CAAD,CAAP,CAAWG,KAAX,G,6OAWS,CACb,EAAI,KAAKvE,SAAL,CAAeqE,gBAAf,CAAgC,6BAAhC,CAAJ,EACK9C,GADL,CACS,SAAAiD,CAAE,QAAIA,CAAAA,CAAE,CAACC,YAAH,CAAgB,UAAhB,IAAJ,CADX,CAEH,C,qDAMe,CACZ,EAAI,KAAKzE,SAAL,CAAeqE,gBAAf,CAAgC,6BAAhC,CAAJ,EACK9C,GADL,CACS,SAAAiD,CAAE,QAAIA,CAAAA,CAAE,CAACE,eAAH,CAAmB,UAAnB,CAAJ,CADX,CAEH,C,oFASoBzB,C,yFAEjBA,CAAC,CAACC,cAAF,G,eAGY,MAAKyB,gBAAL,E,mEAGZ,KAAKnB,cAAL,GAGIpC,C,CAAW,KAAKkC,aAAL,CAAmB,KAAKtD,SAAL,CAAeoD,aAAf,CAA6B,MAA7B,CAAnB,C,CAGfhB,UAAKC,IAAL,CAAU,CAAC,CACPC,UAAU,CAAE,iBADL,CAEPnB,IAAI,CAAE,CACFoB,QAAQ,CAAEnB,CADR,CAEFoB,IAAI,CAAE,KAAKvC,SAFT,CAFC,CAAD,CAAV,EAMI,CANJ,EAOK2B,IAPL,CAOU,SAASa,CAAT,CAAmB,CACrB,GAAI,CAACA,CAAQ,CAACmC,SAAd,CAAyB,CAErB,KAAK7C,UAAL,CAAgBU,CAAQ,CAACZ,IAAzB,CAA+Ba,UAASC,0BAAT,CAAoCF,CAAQ,CAACG,UAA7C,CAA/B,EACA,KAAKiC,aAAL,GACA,KAAKC,iBAAL,EACH,CALD,IAKO,CAGHnB,UAAEC,GAAF,CAAM,+BAAN,CAAuC,UAAW,CAC9CE,CAAC,CAACC,sBAAF,CAAyBC,sBAAzB,EACH,CAFD,EAKA,GAAIe,CAAAA,CAAI,CAAGC,IAAI,CAACC,KAAL,CAAWxC,CAAQ,CAACsC,IAApB,CAAX,CACA,KAAKF,aAAL,GACA,KAAKK,eAAL,CAAqBH,CAArB,CACH,CACD,MAAO,KACV,CAnBK,CAmBJ/D,IAnBI,CAmBC,IAnBD,CAPV,EA2BKmE,IA3BL,CA2BU,KAAKC,aAAL,CAAmBpE,IAAnB,CAAwB,IAAxB,CA3BV,E","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Display an embedded form, it is only loaded and reloaded inside its container\n *\n * @module     core_form/ajaxform\n * @package    core_form\n * @copyright  2019 Marina Glancy\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport Event from 'core/event';\nimport {get_strings as getStrings} from 'core/str';\nimport Y from 'core/yui';\nimport Fragment from 'core/fragment';\n\nexport default class AjaxForm {\n    /**\n     * Constructor\n     *\n     * Creates an instance\n     *\n     * @param {Element} container - the parent element for the form\n     * @param {string} formClass full name of the php class that extends \\core_form\\modal , must be in autoloaded location\n     */\n    constructor(container, formClass) {\n        this.formClass = formClass;\n        this.container = container;\n\n        // Ensure strings required for shortforms are always available.\n        getStrings([\n            {key: 'collapseall', component: 'moodle'},\n            {key: 'expandall', component: 'moodle'}\n        ]).catch(Notification.exception);\n\n        // Allow to register delegated events handlers in vanilla JS (similar to Jquery .on()).\n        const on = (eventType, childSelector, eventHandler) => {\n            this.container.addEventListener(eventType, eventOnElement => {\n                if (eventOnElement.target.matches(childSelector)) {\n                    eventHandler(eventOnElement);\n                }\n            });\n        };\n\n        // We catch the press on cancel button in the form.\n        on('click', 'form input[type=submit][data-cancel]', this.cancelButtonPressed.bind(this));\n\n        // We catch the press on no-submit buttons in the forms (for example, \"Add\" button in the repeat element).\n        on('click', 'form input[type=submit][data-no-submit]', this.noSubmitButtonPressed.bind(this));\n\n        // We catch the form submit event and use it to submit the form with ajax.\n        on('submit', 'form', this.submitFormAjax.bind(this));\n    }\n\n    /**\n     * Loads the form via AJAX and shows it inside a given container\n     *\n     * @param {Object} args\n     * @return {Promise}\n     * @public\n     */\n    load(args) {\n        const formData = Object.keys(args || {})\n            .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(args[k]))\n            .join('&');\n        return this.getBody(formData)\n            .then(([html, js]) => this.updateForm(html, js));\n    }\n\n    /**\n     * @param {String} formDataString form data in format of a query string\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    getBody(formDataString) {\n        return new Promise((resolve, reject) => {\n            Ajax.call([{\n                methodname: 'core_form_modal',\n                args: {\n                    formdata: formDataString,\n                    form: this.formClass\n                }\n            }])[0]\n                .then(response => resolve([response.html, Fragment.processCollectedJavascript(response.javascript)]))\n                .catch(ex => reject(ex));\n        });\n    }\n\n    /**\n     * On form submit. Caller may override\n     *\n     * @param {Object} response Response received from the form's \"process\" method\n     * @return {Object}\n     */\n    onSubmitSuccess(response) {\n        // Remove the form since its contents is no longer correct. For example, if the element was created as a result of\n        // form submission the \"id\" in the form will be still zero.\n        this.container.innerHTML = '';\n\n        // Return here is irrelevant, it is only present to make eslint happy.\n        return response;\n    }\n\n    /**\n     * On form validation error. Caller may override\n     *\n     * @return {mixed}\n     */\n    onValidationError() {\n        // By default this function does nothing. Return here is irrelevant, it is only present to make eslint happy.\n        return undefined;\n    }\n\n    /**\n     * On form cancel. Caller may override\n     */\n    onCancel() {\n        // By default removes the form from the DOM.\n        this.container.innerHTML = '';\n    }\n\n    /**\n     * On exception during form processing. Caller may override\n     *\n     * @param {Object} exception\n     */\n    onSubmitError(exception) {\n        Notification.exception(exception);\n    }\n\n    serializeForm(form) {\n        var formData = new FormData(form);\n        return [...formData.keys()]\n            .map(key => encodeURIComponent(key) + '=' + encodeURIComponent(formData.get(key)))\n            .join('&');\n    }\n\n    /**\n     * Click on a \"submit\" button that is marked in the form as registerNoSubmitButton()\n     *\n     * @method submitButtonPressed\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    async noSubmitButtonPressed(e) {\n        e.preventDefault();\n\n        let button = e.target;\n        var form = this.container.querySelector('form');\n        await this.notifyFormSubmitAjax(form, true);\n\n        // Add the button name to the form data and submit it.\n        const formData = this.serializeForm(form) + '&' +\n            encodeURIComponent(button.getAttribute('name')) + '=' +\n            encodeURIComponent(button.getAttribute('value'));\n        this.disableButtons();\n        this.getBody(formData)\n            .then(([html, js]) => this.updateForm(html, js))\n            .catch(Notification.exception);\n    }\n\n    /**\n     * Wrapper for Event.notifyFormSubmitAjax that waits for the module to load\n     *\n     * We often destroy the form right after calling this function and we need to make sure that it actually\n     * completes before it, or otherwise it will try to work with a form that does not exist.\n     *\n     * @param {Element} form\n     * @param {Boolean} skipValidation\n     */\n    async notifyFormSubmitAjax(form, skipValidation = false) {\n        let promise = new Promise(resolve => {\n            Y.use('event', 'moodle-core-event', 'moodle-core-formchangechecker', function() {\n                Event.notifyFormSubmitAjax(form, skipValidation);\n                resolve();\n            });\n        });\n        await promise;\n    }\n\n    /**\n     * Click on a \"cancel\" button\n     *\n     * @method cancelButtonPressed\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    async cancelButtonPressed(e) {\n        e.preventDefault();\n\n        const form = this.container.querySelector('form');\n        // Notify listeners that the form is about to be submitted (this will reset atto autosave).\n        await this.notifyFormSubmitAjax(form, true);\n        // Reset \"dirty\" form state (warning if there are changes).\n        M.core_formchangechecker.reset_form_dirty_state();\n\n        this.onCancel();\n    }\n\n    /**\n     * Update form contents\n     *\n     * @param {string} html\n     * @param {string} js\n     */\n    updateForm(html, js) {\n        Templates.replaceNodeContents(this.container, html, js);\n    }\n\n    /**\n     * Validate form elements\n     * @return {boolean} true if client-side validation has passed, false if there are errors\n     */\n    async validateElements() {\n\n        // Notify listeners that the form is about to be submitted (this will reset atto autosave).\n        await this.notifyFormSubmitAjax(this.container.querySelector('form'));\n\n        // Now the change events have run, see if there are any \"invalid\" form fields.\n        const invalid = [...this.container.querySelectorAll('[aria-invalid=\"true\"], .error')];\n\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (invalid.length) {\n            invalid[0].focus();\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Disable buttons during form submission\n     * @private\n     */\n    disableButtons() {\n        [...this.container.querySelectorAll('form input[type=\"submit\"]')]\n            .map(el => el.setAttribute('disabled', true));\n    }\n\n    /**\n     * Enable buttons after form submission (on validation error)\n     * @private\n     */\n    enableButtons() {\n        [...this.container.querySelectorAll('form input[type=\"submit\"]')]\n            .map(el => el.removeAttribute('disabled'));\n    }\n\n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    async submitFormAjax(e) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (!(await this.validateElements())) {\n            return;\n        }\n        this.disableButtons();\n\n        // Convert all the form elements values to a serialised string.\n        var formData = this.serializeForm(this.container.querySelector('form'));\n\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'core_form_modal',\n            args: {\n                formdata: formData,\n                form: this.formClass\n            }\n        }])[0]\n            .then(function(response) {\n                if (!response.submitted) {\n                    // Form was not submitted, it could be either because validation failed or because no-submit button was pressed.\n                    this.updateForm(response.html, Fragment.processCollectedJavascript(response.javascript));\n                    this.enableButtons();\n                    this.onValidationError();\n                } else {\n                    // Form was submitted properly.\n                    // Reset \"dirty\" form state (warning if there are changes).\n                    Y.use('moodle-core-formchangechecker', function() {\n                        M.core_formchangechecker.reset_form_dirty_state();\n                    });\n\n                    // Execute callback.\n                    var data = JSON.parse(response.data);\n                    this.enableButtons();\n                    this.onSubmitSuccess(data);\n                }\n                return null;\n            }.bind(this))\n            .fail(this.onSubmitError.bind(this));\n    }\n}\n"],"file":"ajaxform.min.js"}