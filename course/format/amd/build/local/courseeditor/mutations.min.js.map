{"version":3,"file":"mutations.min.js","sources":["../../../src/local/courseeditor/mutations.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport ajax from 'core/ajax';\n\n/**\n * Default mutation manager\n *\n * @module     core_courseformat/local/courseeditor/mutations\n * @class     core_courseformat/local/courseeditor/mutations\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class {\n\n    // All course editor mutations for Moodle 4.0 will be located in this file.\n\n    /**\n     * Private method to call core_courseformat_update_course webservice.\n     *\n     * @method _callEditWebservice\n     * @param {string} action\n     * @param {number} courseId\n     * @param {array} ids\n     * @param {number} targetSectionId optional target section id (for moving actions)\n     * @param {number} targetCmId optional target cm id (for moving actions)\n     */\n    async _callEditWebservice(action, courseId, ids, targetSectionId, targetCmId) {\n        const args = {\n            action,\n            courseid: courseId,\n            ids,\n        };\n        if (targetSectionId) {\n            args.targetsectionid = targetSectionId;\n        }\n        if (targetCmId) {\n            args.targetcmid = targetCmId;\n        }\n        let ajaxresult = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        return JSON.parse(ajaxresult);\n    }\n\n\n    /**\n     * Mutation module initialize.\n     *\n     * The reactive instance will execute this method when addMutations or setMutation is invoked.\n     *\n     * @param {StateManager} stateManager the state manager\n     */\n    init(stateManager) {\n        // Add a method to prepare the fields when some update is comming from the server.\n        stateManager.addUpdateTypes({\n            prepareFields: this._prepareFields,\n        });\n    }\n\n    /**\n     * Add default values to state elements.\n     *\n     * This method is called every time a webservice returns a update state message.\n     *\n     * @param {Object} stateManager the state manager\n     * @param {String} updateName the state element to update\n     * @param {Object} fields the new data\n     * @returns {Object} final fields data\n     */\n    _prepareFields(stateManager, updateName, fields) {\n        // Any update should unlock the element.\n        fields.locked = false;\n        return fields;\n    }\n\n    /**\n     * Move course modules to specific course location.\n     *\n     * Note that one of targetSectionId or targetCmId should be provided in order to identify the\n     * new location:\n     *  - targetCmId: the activities will be located avobe the target cm. The targetSectionId\n     *                value will be ignored in this case.\n     *  - targetSectionId: the activities will be appended to the section. In this case\n     *                     targetSectionId should not be present.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmids the list of cm ids to move\n     * @param {number} targetSectionId the target section id\n     * @param {number} targetCmId the target course module id\n     */\n    async cmMove(stateManager, cmids, targetSectionId, targetCmId) {\n        if (!targetSectionId && !targetCmId) {\n            throw new Error(`Mutation cmMove requires targetSectionId or targetCmId`);\n        }\n        const course = stateManager.get('course');\n        this.cmLock(stateManager, cmids, true);\n        const updates = await this._callEditWebservice('cm_move', course.id, cmids, targetSectionId, targetCmId);\n        stateManager.processUpdates(updates);\n        this.cmLock(stateManager, cmids, false);\n    }\n\n    /**\n     * Move course modules to specific course location.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids to move\n     * @param {number} targetSectionId the target section id\n     */\n    async sectionMove(stateManager, sectionIds, targetSectionId) {\n        if (!targetSectionId) {\n            throw new Error(`Mutation sectionMove requires targetSectionId`);\n        }\n        const course = stateManager.get('course');\n        this.sectionLock(stateManager, sectionIds, true);\n        const updates = await this._callEditWebservice('section_move', course.id, sectionIds, targetSectionId);\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n    }\n\n    /**\n     * Add a new section to a specific course location.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {number} targetSectionId optional the target section id\n     */\n    async addSection(stateManager, targetSectionId) {\n        if (!targetSectionId) {\n            targetSectionId = 0;\n        }\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_add', course.id, [], targetSectionId);\n        stateManager.processUpdates(updates);\n    }\n\n    /**\n     * Delete sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of course modules ids\n     */\n    async sectionDelete(stateManager, sectionIds) {\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_delete', course.id, sectionIds);\n        stateManager.processUpdates(updates);\n    }\n\n    /**\n     * Mark or unmark course modules as dragging.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} dragValue the new dragging value\n     */\n    cmDrag(stateManager, cmIds, dragValue) {\n        this.setPageItem(stateManager);\n        this._setElementsValue(stateManager, 'cm', cmIds, 'dragging', dragValue);\n    }\n\n    /**\n     * Mark or unmark course sections as dragging.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     * @param {bool} dragValue the new dragging value\n     */\n    sectionDrag(stateManager, sectionIds, dragValue) {\n        this.setPageItem(stateManager);\n        this._setElementsValue(stateManager, 'section', sectionIds, 'dragging', dragValue);\n    }\n\n    /**\n     * Mark or unmark course modules as complete.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} complete the new completion value\n     */\n    cmCompletion(stateManager, cmIds, complete) {\n        const newValue = (complete) ? 1 : 0;\n        this._setElementsValue(stateManager, 'cm', cmIds, 'completionstate', newValue);\n    }\n\n    /**\n     * Lock or unlock course modules.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} lockValue the new locked value\n     */\n    cmLock(stateManager, cmIds, lockValue) {\n        this._setElementsValue(stateManager, 'cm', cmIds, 'locked', lockValue);\n    }\n\n    /**\n     * Lock or unlock course sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     * @param {bool} lockValue the new locked value\n     */\n    sectionLock(stateManager, sectionIds, lockValue) {\n        this._setElementsValue(stateManager, 'section', sectionIds, 'locked', lockValue);\n    }\n\n    _setElementsValue(stateManager, name, ids, fieldName, newValue) {\n        stateManager.setReadOnly(false);\n        ids.forEach((id) => {\n            const element = stateManager.get(name, id);\n            if (element) {\n                element[fieldName] = newValue;\n            }\n        });\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Set the page current item.\n     *\n     * Only one element of the course state can be the page item at a time.\n     *\n     * There are several actions that can alter the page current item. For example, when the user is in an activity\n     * page, the page item is always the activity one. However, in a course page, when the user scrolls to an element,\n     * this element get the page item.\n     *\n     * If the page item is static means that it is not meant to change. This is important because\n     * static page items has some special logic. For example, if a cm is the static page item\n     * and it is inside a collapsed section, the course index will expand the section to make it visible.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {String|undefined} type the element type (section or cm). Undefined will remove the current page item.\n     * @param {Number|undefined} id the element id\n     * @param {boolean|undefined} isStatic if the page item is static\n     */\n    setPageItem(stateManager, type, id, isStatic) {\n        let newPageItem;\n        if (type !== undefined) {\n            newPageItem = stateManager.get(type, id);\n            if (!newPageItem) {\n                return;\n            }\n        }\n        stateManager.setReadOnly(false);\n        // Remove the current page item.\n        const course = stateManager.get('course');\n        course.pageItem = null;\n        // Save the new page item.\n        if (newPageItem) {\n            course.pageItem = {\n                id,\n                type,\n                sectionId: (type == 'section') ? newPageItem.id : newPageItem.sectionid,\n                isStatic,\n            };\n        }\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Unlock all course elements.\n     *\n     * @param {StateManager} stateManager the current state manager\n     */\n    unlockAll(stateManager) {\n        const state = stateManager.state;\n        stateManager.setReadOnly(false);\n        state.section.forEach((section) => {\n            section.locked = false;\n        });\n        state.cm.forEach((cm) => {\n            cm.locked = false;\n        });\n        stateManager.setReadOnly(true);\n    }\n\n    /*\n     * Get updated user preferences and state data related to some section ids.\n     *\n     * @param {StateManager} stateManager the current state\n     * @param {array} sectionIds the list of section ids to update\n     * @param {Object} preferences the new preferences values\n     */\n    async sectionPreferences(stateManager, sectionIds, preferences) {\n        stateManager.setReadOnly(false);\n        // Check if we need to update preferences.\n        let updatePreferences = false;\n        sectionIds.forEach(sectionId => {\n            const section = stateManager.get('section', sectionId);\n            if (section === undefined) {\n                return;\n            }\n            let newValue = preferences.contentcollapsed ?? section.contentcollapsed;\n            if (section.contentcollapsed != newValue) {\n                section.contentcollapsed = newValue;\n                updatePreferences = true;\n            }\n            newValue = preferences.indexcollapsed ?? section.indexcollapsed;\n            if (section.indexcollapsed != newValue) {\n                section.indexcollapsed = newValue;\n                updatePreferences = true;\n            }\n        });\n        stateManager.setReadOnly(true);\n\n        if (updatePreferences) {\n            // Build the preference structures.\n            const course = stateManager.get('course');\n            const state = stateManager.state;\n            const prefKey = `coursesectionspreferences_${course.id}`;\n            const preferences = {\n                contentcollapsed: [],\n                indexcollapsed: [],\n            };\n            state.section.forEach(section => {\n                if (section.contentcollapsed) {\n                    preferences.contentcollapsed.push(section.id);\n                }\n                if (section.indexcollapsed) {\n                    preferences.indexcollapsed.push(section.id);\n                }\n            });\n            const jsonString = JSON.stringify(preferences);\n            M.util.set_user_preference(prefKey, jsonString);\n        }\n    }\n\n    /**\n     * Get updated state data related to some cm ids.\n     *\n     * @method cmState\n     * @param {StateManager} stateManager the current state\n     * @param {array} cmids the list of cm ids to update\n     */\n    async cmState(stateManager, cmids) {\n        this.cmLock(stateManager, cmids, true);\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('cm_state', course.id, cmids);\n        stateManager.processUpdates(updates);\n        this.cmLock(stateManager, cmids, false);\n    }\n\n    /**\n     * Get updated state data related to some section ids.\n     *\n     * @method sectionState\n     * @param {StateManager} stateManager the current state\n     * @param {array} sectionIds the list of section ids to update\n     */\n    async sectionState(stateManager, sectionIds) {\n        this.sectionLock(stateManager, sectionIds, true);\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_state', course.id, sectionIds);\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n    }\n\n    /**\n     * Get the full updated state data of the course.\n     *\n     * @param {StateManager} stateManager the current state\n     */\n    async courseState(stateManager) {\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('course_state', course.id);\n        stateManager.processUpdates(updates);\n    }\n\n}\n"],"names":["action","courseId","ids","targetSectionId","targetCmId","args","courseid","targetsectionid","targetcmid","ajaxresult","ajax","call","methodname","JSON","parse","init","stateManager","addUpdateTypes","prepareFields","this","_prepareFields","updateName","fields","locked","cmids","Error","course","get","cmLock","updates","_callEditWebservice","id","processUpdates","sectionIds","sectionLock","cmDrag","cmIds","dragValue","setPageItem","_setElementsValue","sectionDrag","cmCompletion","complete","newValue","lockValue","name","fieldName","setReadOnly","forEach","element","type","isStatic","newPageItem","undefined","pageItem","sectionId","sectionid","unlockAll","state","section","cm","preferences","updatePreferences","contentcollapsed","indexcollapsed","prefKey","push","jsonString","stringify","M","util","set_user_preference"],"mappings":"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"}