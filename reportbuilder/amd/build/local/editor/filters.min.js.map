{"version":3,"file":"filters.min.js","sources":["../../../src/local/editor/filters.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Report builder filters editor\n *\n * @module      core_reportbuilder/local/editor/filters\n * @copyright   2021 David Matamoros <davidmc@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\nimport $ from 'jquery';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport 'core/inplace_editable';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {prefetchStrings} from 'core/prefetch';\nimport SortableList from 'core/sortable_list';\nimport {get_string as getString} from 'core/str';\nimport Templates from 'core/templates';\nimport {add as addToast} from 'core/toast';\nimport * as reportEvents from 'core_reportbuilder/local/events';\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\nimport {addFilter, deleteFilter, reorderFilter} from 'core_reportbuilder/local/repository/filters';\n\n/**\n * Reload filters settings region\n *\n * @param {Element} reportElement\n * @param {Object} templateContext\n * @return {Promise}\n */\nconst reloadSettingsFiltersRegion = (reportElement, templateContext) => {\n    const pendingPromise = new Pending('core_reportbuilder/filters:reload');\n    const settingsFiltersRegion = reportElement.querySelector(reportSelectors.regions.settingsFilters);\n\n    return Templates.renderForPromise('core_reportbuilder/local/settings/filters', {filters: templateContext})\n        .then(({html, js}) => {\n            Templates.replaceNode(settingsFiltersRegion, html, js);\n            // Re-focus the add filter element after reloading the region.\n            const reportAddFilter = reportElement.querySelector(reportSelectors.actions.reportAddFilter);\n            reportAddFilter?.focus();\n            return pendingPromise.resolve();\n        });\n};\n\n/**\n * Initialise module, prefetch all required strings\n *\n * @param {Boolean} initialized Ensure we only add our listeners once\n */\nexport const init = initialized => {\n    prefetchStrings('core_reportbuilder', [\n        'deletefilter',\n        'deletefilterconfirm',\n        'filteradded',\n        'filterdeleted',\n        'filtermoved',\n    ]);\n\n    prefetchStrings('core', [\n        'delete',\n    ]);\n\n    if (initialized) {\n        return;\n    }\n\n    document.addEventListener('click', event => {\n\n        // Add filter to report.\n        const reportAddFilter = event.target.closest(reportSelectors.actions.reportAddFilter);\n        if (reportAddFilter) {\n            event.preventDefault();\n\n            const reportElement = reportAddFilter.closest(reportSelectors.regions.report);\n\n            // Check if dropdown is closed with no filter selected.\n            if (reportAddFilter.value === '0') {\n                return;\n            }\n\n            const pendingPromise = new Pending('core_reportbuilder/filters:add');\n\n            addFilter(reportElement.dataset.reportId, reportAddFilter.value)\n                .then(data => reloadSettingsFiltersRegion(reportElement, data))\n                .then(() => getString('filteradded', 'core_reportbuilder',\n                    reportAddFilter.options[reportAddFilter.selectedIndex].text))\n                .then(addToast)\n                .then(() => pendingPromise.resolve())\n                .catch(Notification.exception);\n        }\n\n        // Remove filter from report.\n        const reportRemoveFilter = event.target.closest(reportSelectors.actions.reportRemoveFilter);\n        if (reportRemoveFilter) {\n            event.preventDefault();\n\n            const reportElement = reportRemoveFilter.closest(reportSelectors.regions.report);\n            const filterContainer = reportRemoveFilter.closest(reportSelectors.regions.activeFilter);\n            const filterName = filterContainer.dataset.filterName;\n\n            Notification.saveCancelPromise(\n                getString('deletefilter', 'core_reportbuilder', filterName),\n                getString('deletefilterconfirm', 'core_reportbuilder', filterName),\n                getString('delete', 'core'),\n                {triggerElement: reportRemoveFilter}\n            ).then(() => {\n                const pendingPromise = new Pending('core_reportbuilder/filters:remove');\n\n                return deleteFilter(reportElement.dataset.reportId, filterContainer.dataset.filterId)\n                    .then(data => reloadSettingsFiltersRegion(reportElement, data))\n                    .then(() => addToast(getString('filterdeleted', 'core_reportbuilder', filterName)))\n                    .then(() => {\n                        dispatchEvent(reportEvents.tableReload, {}, reportElement);\n                        return pendingPromise.resolve();\n                    })\n                    .catch(Notification.exception);\n            }).catch(() => {\n                return;\n            });\n        }\n    });\n\n    // Initialize sortable list to handle active filters moving (note JQuery dependency, see MDL-72293 for resolution).\n    var activeFiltersSortableList = new SortableList(`${reportSelectors.regions.activeFilters} ul`, {isHorizontal: false});\n    activeFiltersSortableList.getElementName = element => Promise.resolve(element.data('filterName'));\n\n    $(document).on(SortableList.EVENTS.DROP, `${reportSelectors.regions.report} li[data-filter-id]`, (event, info) => {\n        if (info.positionChanged) {\n            const pendingPromise = new Pending('core_reportbuilder/filters:reorder');\n            const reportElement = event.target.closest(reportSelectors.regions.report);\n            const filterId = info.element.data('filterId');\n            const filterPosition = info.element.data('filterPosition');\n\n            // Select target position, if moving to the end then count number of element siblings.\n            let targetFilterPosition = info.targetNextElement.data('filterPosition') || info.element.siblings().length + 2;\n            if (targetFilterPosition > filterPosition) {\n                targetFilterPosition--;\n            }\n\n            reorderFilter(reportElement.dataset.reportId, filterId, targetFilterPosition)\n                .then(data => reloadSettingsFiltersRegion(reportElement, data))\n                .then(() => getString('filtermoved', 'core_reportbuilder', info.element.data('filterName')))\n                .then(addToast)\n                .then(() => pendingPromise.resolve())\n                .catch(Notification.exception);\n        }\n    });\n};\n"],"names":["reloadSettingsFiltersRegion","reportElement","templateContext","pendingPromise","Pending","settingsFiltersRegion","querySelector","reportSelectors","regions","settingsFilters","Templates","renderForPromise","filters","then","html","js","replaceNode","reportAddFilter","actions","focus","resolve","initialized","document","addEventListener","event","target","closest","preventDefault","report","value","dataset","reportId","data","options","selectedIndex","text","addToast","catch","Notification","exception","reportRemoveFilter","filterContainer","activeFilter","filterName","saveCancelPromise","triggerElement","filterId","reportEvents","tableReload","SortableList","activeFilters","isHorizontal","getElementName","element","Promise","on","EVENTS","DROP","info","positionChanged","filterPosition","targetFilterPosition","targetNextElement","siblings","length"],"mappings":"ssEA8CMA,4BAA8B,SAACC,cAAeC,qBAC1CC,eAAiB,IAAIC,iBAAQ,qCAC7BC,sBAAwBJ,cAAcK,cAAcC,gBAAgBC,QAAQC,wBAE3EC,mBAAUC,iBAAiB,4CAA6C,CAACC,QAASV,kBACpFW,MAAK,mBAAEC,UAAAA,KAAMC,QAAAA,sBACAC,YAAYX,sBAAuBS,KAAMC,QAE7CE,gBAAkBhB,cAAcK,cAAcC,gBAAgBW,QAAQD,wBAC5EA,MAAAA,iBAAAA,gBAAiBE,QACVhB,eAAeiB,4BASd,SAAAC,4CACA,qBAAsB,CAClC,eACA,sBACA,cACA,gBACA,8CAGY,OAAQ,CACpB,WAGAA,eAIJC,SAASC,iBAAiB,SAAS,SAAAC,WAGzBP,gBAAkBO,MAAMC,OAAOC,QAAQnB,gBAAgBW,QAAQD,oBACjEA,gBAAiB,CACjBO,MAAMG,qBAEA1B,cAAgBgB,gBAAgBS,QAAQnB,gBAAgBC,QAAQoB,WAGxC,MAA1BX,gBAAgBY,iBAId1B,eAAiB,IAAIC,iBAAQ,yDAEzBH,cAAc6B,QAAQC,SAAUd,gBAAgBY,OACrDhB,MAAK,SAAAmB,aAAQhC,4BAA4BC,cAAe+B,SACxDnB,MAAK,kBAAM,mBAAU,cAAe,qBACjCI,gBAAgBgB,QAAQhB,gBAAgBiB,eAAeC,SAC1DtB,KAAKuB,YACLvB,MAAK,kBAAMV,eAAeiB,aAC1BiB,MAAMC,sBAAaC,eAItBC,mBAAqBhB,MAAMC,OAAOC,QAAQnB,gBAAgBW,QAAQsB,uBACpEA,mBAAoB,CACpBhB,MAAMG,qBAEA1B,eAAgBuC,mBAAmBd,QAAQnB,gBAAgBC,QAAQoB,QACnEa,gBAAkBD,mBAAmBd,QAAQnB,gBAAgBC,QAAQkC,cACrEC,WAAaF,gBAAgBX,QAAQa,iCAE9BC,mBACT,mBAAU,eAAgB,qBAAsBD,aAChD,mBAAU,sBAAuB,qBAAsBA,aACvD,mBAAU,SAAU,QACpB,CAACE,eAAgBL,qBACnB3B,MAAK,eACGV,eAAiB,IAAIC,iBAAQ,4CAE5B,yBAAaH,eAAc6B,QAAQC,SAAUU,gBAAgBX,QAAQgB,UACvEjC,MAAK,SAAAmB,aAAQhC,4BAA4BC,eAAe+B,SACxDnB,MAAK,kBAAM,eAAS,mBAAU,gBAAiB,qBAAsB8B,gBACrE9B,MAAK,qDACYkC,aAAaC,YAAa,GAAI/C,gBACrCE,eAAeiB,aAEzBiB,MAAMC,sBAAaC,cACzBF,OAAM,mBAOe,IAAIY,iCAAgB1C,gBAAgBC,QAAQ0C,qBAAoB,CAACC,cAAc,IACrFC,eAAiB,SAAAC,gBAAWC,QAAQlC,QAAQiC,QAAQrB,KAAK,oCAEjFV,UAAUiC,GAAGN,uBAAaO,OAAOC,eAASlD,gBAAgBC,QAAQoB,+BAA6B,SAACJ,MAAOkC,SACjGA,KAAKC,gBAAiB,KAChBxD,eAAiB,IAAIC,iBAAQ,sCAC7BH,cAAgBuB,MAAMC,OAAOC,QAAQnB,gBAAgBC,QAAQoB,QAC7DkB,SAAWY,KAAKL,QAAQrB,KAAK,YAC7B4B,eAAiBF,KAAKL,QAAQrB,KAAK,kBAGrC6B,qBAAuBH,KAAKI,kBAAkB9B,KAAK,mBAAqB0B,KAAKL,QAAQU,WAAWC,OAAS,EACzGH,qBAAuBD,gBACvBC,kDAGU5D,cAAc6B,QAAQC,SAAUe,SAAUe,sBACnDhD,MAAK,SAAAmB,aAAQhC,4BAA4BC,cAAe+B,SACxDnB,MAAK,kBAAM,mBAAU,cAAe,qBAAsB6C,KAAKL,QAAQrB,KAAK,kBAC5EnB,KAAKuB,YACLvB,MAAK,kBAAMV,eAAeiB,aAC1BiB,MAAMC,sBAAaC"}